{"version":3,"file":"static/js/798.3f99a1e7.chunk.js","mappings":"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","sources":["webpack://4dev/./src/pages/Tasks/ui/Tasks.module.scss?6579","app/store/selectors/tasksSelectors.ts","shared/interfaces/task.interface.ts","pages/Tasks/ui/TasksHeader.tsx","webpack://4dev/./src/shared/ui/TaskCardTitle/TaskCardTitle.module.scss?35c1","shared/ui/TaskCardTitle/TaskCardTitle.tsx","pages/Tasks/ui/TaskCard.tsx","pages/Tasks/ui/TasksGroup.tsx","shared/utils/getSelectOptions.ts","pages/Tasks/ui/TaskUpdate.tsx","pages/Tasks/ui/TaskCreate.tsx","pages/Tasks/ui/TasksPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Tasks_header__C1Mpl\",\"header_avatar\":\"Tasks_header_avatar__GvgYi\",\"wrapper\":\"Tasks_wrapper__sPWtI\",\"groups\":\"Tasks_groups__Q3Fon\",\"group\":\"Tasks_group__f59D8\",\"group__title\":\"Tasks_group__title__WFep5\",\"description\":\"Tasks_description__AKl1w\",\"buttons\":\"Tasks_buttons__FDuE4\",\"form\":\"Tasks_form__UgiPg\"};","import { RootState } from '../store';\r\n\r\nexport const tasksState = (state: RootState) => state.tasks;\r\n\r\n","export interface Task {\r\n    \"id\": string;\r\n    \"status\": TaskStatus;\r\n    \"priority\": TaskPriority;\r\n    \"title\": string;\r\n    \"description\": string;\r\n    \"schedule\": {\r\n        \"creation_time\": Date\r\n    },\r\n    \"author_name\": string;\r\n}\r\n\r\nexport enum TaskStatus {\r\n    IN_QUEUE ,\r\n    IN_PROGRESS,\r\n    DONE\r\n}\r\n\r\nexport enum TaskPriority {\r\n    FIRST,\r\n    SECOND,\r\n    THIRD\r\n}\r\n\r\nexport const TaskStatusNames = {\r\n    [TaskStatus.IN_QUEUE] : 'В очереди',\r\n    [TaskStatus.IN_PROGRESS] : 'В работе',\r\n    [TaskStatus.DONE] : 'Выполнено',\r\n}\r\n\r\nexport const TaskPriorityNames = {\r\n    [TaskPriority.FIRST] : 'Срочно',\r\n    [TaskPriority.SECOND] : 'Важно',\r\n    [TaskPriority.THIRD] : 'Не срочно',\r\n}","import { FC } from 'react';\r\nimport styles from './Tasks.module.scss';\r\nimport { Avatar, Button } from 'antd';\r\nimport { useAuth } from '../../../app/providers/auth/AuthProvider';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\n\r\nconst TasksHeader: FC = () => {\r\n    const { user, signOut } = useAuth();\r\n    const { setContentType } = useModal();\r\n    const createTaskHandler = () => {\r\n        setContentType('CREATE');\r\n    };\r\n    return (\r\n        <div className={styles.header}>\r\n            <Button onClick={createTaskHandler}>Новая задача</Button>\r\n            <div>\r\n                <Button type=\"link\" onClick={signOut}>Выйти</Button>\r\n                <Avatar>{user}</Avatar>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TasksHeader;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TaskCardTitle_container__2TMQA\",\"indicator\":\"TaskCardTitle_indicator__ybPDO\",\"first\":\"TaskCardTitle_first__ST5Js\",\"second\":\"TaskCardTitle_second__UABCV\",\"third\":\"TaskCardTitle_third__70Jp0\"};","import { FC } from 'react';\r\nimport styles from './TaskCardTitle.module.scss';\r\nimport { TaskPriority } from '../../interfaces/task.interface';\r\nimport classnames from 'classnames';\r\n\r\ninterface ITaskCardTitle {\r\n    title: string;\r\n    priority: TaskPriority;\r\n}\r\n\r\nconst TaskCardTitle: FC<ITaskCardTitle> = ({ title, priority }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={classnames(styles.indicator, {\r\n                [styles.first]: priority === TaskPriority.FIRST,\r\n                [styles.second]: priority === TaskPriority.SECOND,\r\n                [styles.third]: priority === TaskPriority.THIRD,\r\n            })} />\r\n            <div>{title}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskCardTitle;\r\n","import { FC } from 'react';\r\nimport { Task } from '../../../shared/interfaces/task.interface';\r\nimport { Card } from 'antd';\r\nimport TaskCardTitle from '../../../shared/ui/TaskCardTitle/TaskCardTitle';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { useActions } from '../../../app/store';\r\n\r\ninterface ITaskCard {\r\n    task: Task;\r\n}\r\n\r\nconst TaskCard: FC<ITaskCard> = ({ task }) => {\r\n    const { title, author_name, priority } = task;\r\n    const { setCurrentTask } = useActions();\r\n    const { setContentType } = useModal();\r\n    const cardToggleHandler = () => {\r\n        setContentType('UPDATE');\r\n        setCurrentTask(task);\r\n    };\r\n    return (\r\n        <Card hoverable bordered={false} onClick={cardToggleHandler}>\r\n            <TaskCardTitle title={title} priority={priority} />\r\n            <hr />\r\n            <div>{author_name}</div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TaskCard;\r\n","import styles from './Tasks.module.scss';\r\nimport { FC, PropsWithChildren } from 'react';\r\nimport { Task } from '../../../shared/interfaces/task.interface';\r\nimport TaskCard from './TaskCard';\r\nimport { Card } from 'antd';\r\n\r\ninterface Group {\r\n    tasks: Task[];\r\n    title: string;\r\n}\r\n\r\nconst TasksGroup: FC<PropsWithChildren<Group>> = ({ children, title, tasks }) => {\r\n    return (\r\n        <Card>\r\n            <div className={styles.group__title}>{title}</div>\r\n            <div className={styles.group}>\r\n                {\r\n                    tasks.sort((a, b) => a.priority - b.priority)\r\n                        .map((task) => <TaskCard key={task.id} task={task} />)\r\n                }\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TasksGroup;\r\n","\r\nexport const getSelectOptions = (obj: Record<string, string>) => {\r\n    return Object.entries(obj).map(([value, label]) => ({ value, label }))\r\n}","import { Button, Modal, Select } from 'antd';\r\nimport { FC, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n    Task,\r\n    TaskPriorityNames,\r\n    TaskStatusNames\r\n} from '../../../shared/interfaces/task.interface';\r\nimport styles from './Tasks.module.scss';\r\nimport { useActions } from '../../../app/store';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { getSelectOptions } from '../../../shared/utils/getSelectOptions';\r\n\r\ninterface ITaskUpdate {\r\n    task: Task;\r\n}\r\n\r\ninterface IOption {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nconst TaskUpdate: FC<ITaskUpdate> = ({ task }) => {\r\n    const {\r\n        id,\r\n        title,\r\n        author_name,\r\n        description,\r\n        status,\r\n        priority\r\n    } = task;\r\n    const { deleteTask, updateTask, setCurrentTask } = useActions();\r\n    const { control, handleSubmit, watch } = useForm();\r\n    const { onClose, contentType } = useModal();\r\n\r\n    const [statusesOptions, setStatusesOptions] = useState<IOption[]>([]);\r\n    const [prioritiesOptions, setPrioritiesOptions] = useState<IOption[]>([]);\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    const deleteTaskHandler = () => {\r\n        deleteTask(id);\r\n        onClose();\r\n        setCurrentTask(null);\r\n    };\r\n\r\n    const onSubmit = useCallback((data: any) => {\r\n        const task = { id } as Task;\r\n        if (typeof data.status !== 'undefined') {\r\n            task.status = +data.status;\r\n        }\r\n        if (typeof data.priority !== 'undefined') {\r\n            task.priority = +data.priority;\r\n        }\r\n        console.log(data);\r\n        updateTask(task);\r\n        onClose();\r\n        setCurrentTask(null);\r\n    }, [id, onClose, setCurrentTask, updateTask]);\r\n\r\n    useEffect(() => {\r\n        setStatusesOptions(getSelectOptions(TaskStatusNames));\r\n        setPrioritiesOptions(getSelectOptions(TaskPriorityNames));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        watch((data) => {\r\n            setDisabled(!(status !== +data.status || priority !== +data.priority));\r\n        });\r\n    }, [priority, status, watch]);\r\n\r\n    return (\r\n        <Modal\r\n            title={title}\r\n            open={contentType === 'UPDATE'}\r\n            onCancel={onClose}\r\n            footer={null}\r\n            destroyOnClose\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\r\n                <div className={styles.description}>\r\n                    <strong>Исполнитель:</strong>\r\n                    <i>{author_name}</i>\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Описание задачи:</strong>\r\n                    <i>{description}</i>\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Состояние:</strong>\r\n                    <Controller\r\n                        key={statusesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={statusesOptions}\r\n                            defaultValue={status.toString()}\r\n                        />}\r\n                        name=\"status\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Приоритет:</strong>\r\n                    <Controller\r\n                        key={prioritiesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={prioritiesOptions}\r\n                            defaultValue={priority.toString()}\r\n                        />}\r\n                        name=\"priority\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <div className={styles.buttons}>\r\n                    <Button danger onClick={deleteTaskHandler}>Удалить</Button>\r\n                    <Button disabled={disabled} htmlType=\"submit\" type=\"primary\">Сохранить</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TaskUpdate;\r\n","import { Button, Input, Modal, Select } from 'antd';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { FC, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n    Task,\r\n   TaskPriorityNames,\r\n    TaskStatusNames\r\n} from '../../../shared/interfaces/task.interface';\r\nimport styles from './Tasks.module.scss';\r\nimport { useActions, useTypedSelector } from '../../../app/store';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { getSelectOptions } from '../../../shared/utils/getSelectOptions';\r\nimport { tasksState } from '../../../app/store/selectors';\r\n\r\ninterface IOption {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst TaskCreate: FC = () => {\r\n    const { authors } = useTypedSelector(tasksState);\r\n    const { createTask } = useActions();\r\n    const { control, handleSubmit, reset } = useForm();\r\n    const { onClose, contentType } = useModal();\r\n    const [statusesOptions, setStatusesOptions] = useState<IOption[]>([]);\r\n    const [prioritiesOptions, setPrioritiesOptions] = useState<IOption[]>([]);\r\n    const [authorsOptions, setAuthorsOptions] = useState<IOption[]>([]);\r\n\r\n    const resetHandler = () => {\r\n        onClose();\r\n        reset();\r\n    };\r\n\r\n    const getAuthor = (id: string): string => {\r\n        const author = authors.find((author) => author.id === id);\r\n        if (author) {\r\n            return author.author_name;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const onSubmit = useCallback((data: any) => {\r\n        const task = {\r\n            ...data,\r\n            priority: +data.priority,\r\n            status: +data.status,\r\n            author_name: getAuthor(data.author_name),\r\n        } as Task;\r\n\r\n        createTask(task);\r\n        resetHandler();\r\n\r\n    }, [createTask, getAuthor, resetHandler]);\r\n\r\n    useEffect(() => {\r\n        setStatusesOptions(getSelectOptions(TaskStatusNames));\r\n        setPrioritiesOptions(getSelectOptions(TaskPriorityNames));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!!authors.length) {\r\n            setAuthorsOptions(authors.map(({ id, author_name }) => ({ value: id, label: author_name })));\r\n        }\r\n    }, [authors]);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Новая задача\"\r\n            open={contentType === 'CREATE'}\r\n            onCancel={resetHandler}\r\n            footer={null}\r\n            destroyOnClose\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\r\n                <div className={styles.description}>\r\n                    <strong>Название:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <Input {...field} />}\r\n                        name=\"title\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Исполнитель:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={authorsOptions}\r\n                        />}\r\n                        name=\"author_name\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.description}>\r\n                    <strong>Описание задачи:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <TextArea {...field} />}\r\n                        name=\"description\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Состояние:</strong>\r\n                    <Controller\r\n                        key={statusesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={statusesOptions}\r\n                        />}\r\n                        name=\"status\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Приоритет:</strong>\r\n                    <Controller\r\n                        key={prioritiesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={prioritiesOptions}\r\n                        />}\r\n                        name=\"priority\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.buttons}>\r\n                    <Button onClick={resetHandler}>Отменить</Button>\r\n                    <Button htmlType=\"submit\" type=\"primary\">Сохранить</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TaskCreate;\r\n","import styles from './Tasks.module.scss';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../../app/providers/auth/AuthProvider';\nimport { FC, useEffect, useState } from 'react';\nimport { useActions, useTypedSelector } from '../../../app/store';\nimport { tasksState } from '../../../app/store/selectors';\nimport { Task, TaskStatus, TaskStatusNames } from '../../../shared/interfaces/task.interface';\nimport TasksHeader from './TasksHeader';\nimport TasksGroup from './TasksGroup';\nimport TaskUpdate from './TaskUpdate';\nimport TaskCreate from './TaskCreate';\n\ntype IGroup = Record<TaskStatus, Task[]>;\n\nconst TasksPage: FC = () => {\n    const { tasks, currentTask } = useTypedSelector(tasksState);\n    const { authorized } = useAuth();\n    const location = useLocation();\n    const { fetchTasks, fetchAuthors } = useActions();\n    const [group, setGroup] = useState<IGroup>({} as IGroup);\n\n    useEffect(() => {\n        if (authorized) {\n            fetchTasks();\n            fetchAuthors();\n        }\n    }, [authorized, fetchAuthors, fetchTasks]);\n\n    useEffect(() => {\n        if (!!tasks.length) {\n            const group = {} as IGroup;\n            group[TaskStatus.IN_QUEUE] = tasks.filter(({ status }) => status === TaskStatus.IN_QUEUE);\n            group[TaskStatus.IN_PROGRESS] = tasks.filter(({ status }) => status === TaskStatus.IN_PROGRESS);\n            group[TaskStatus.DONE] = tasks.filter(({ status }) => status === TaskStatus.DONE);\n            setGroup(group);\n        }\n    }, [tasks]);\n\n    if (!authorized) {\n        return <Navigate to=\"/error\" state={{ from: location }} replace />;\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <TasksHeader />\n            <TaskCreate />\n            {currentTask && <TaskUpdate task={currentTask} />}\n            <div className={styles.groups}>\n                {\n                    !!group[TaskStatus.IN_QUEUE]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.IN_QUEUE]}\n                        title={TaskStatusNames[TaskStatus.IN_QUEUE]}\n                    />)\n                }\n                {\n                    !!group[TaskStatus.IN_PROGRESS]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.IN_PROGRESS]}\n                        title={TaskStatusNames[TaskStatus.IN_PROGRESS]}\n                    />)\n                }\n                {\n                    !!group[TaskStatus.DONE]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.DONE]}\n                        title={TaskStatusNames[TaskStatus.DONE]}\n                    />)\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default TasksPage;\n"],"names":["tasksState","state","tasks","TaskStatus","TaskPriority","TaskStatusNames","_TaskStatusNames","_defineProperty","IN_QUEUE","IN_PROGRESS","DONE","TaskPriorityNames","_TaskPriorityNames","FIRST","SECOND","THIRD","_useAuth","useAuth","user","signOut","setContentType","useModal","_jsxs","className","styles","children","_jsx","Button","onClick","type","Avatar","_ref","_classnames","title","priority","classnames","task","author_name","setCurrentTask","useActions","Card","hoverable","bordered","TaskCardTitle","sort","a","b","map","TaskCard","id","getSelectOptions","obj","Object","entries","_ref2","_slicedToArray","value","label","description","status","_useActions","deleteTask","updateTask","_useForm","useForm","control","handleSubmit","watch","_useModal","onClose","contentType","_useState","useState","_useState2","statusesOptions","setStatusesOptions","_useState3","_useState4","prioritiesOptions","setPrioritiesOptions","_useState5","_useState6","disabled","setDisabled","onSubmit","useCallback","data","console","log","useEffect","Modal","open","onCancel","footer","destroyOnClose","Controller","render","field","Select","_objectSpread","options","defaultValue","toString","name","length","_ref3","danger","htmlType","TextArea","Input","authors","useTypedSelector","createTask","reset","authorsOptions","setAuthorsOptions","resetHandler","getAuthor","author","find","rules","required","_ref4","_ref5","_ref6","_group$TaskStatus$IN_","_group$TaskStatus$IN_2","_group$TaskStatus$DON","_useTypedSelector","currentTask","authorized","location","useLocation","fetchTasks","fetchAuthors","group","setGroup","filter","TasksHeader","TaskCreate","TaskUpdate","TasksGroup","Navigate","to","from","replace"],"sourceRoot":""}