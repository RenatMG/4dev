{"version":3,"file":"static/js/386.8f222f7a.chunk.js","mappings":"wKACA,EAAsG,uB,sCCoFtG,EA3EsB,WAClB,IAAMA,EAAI,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAsDN,OArDGT,EAAW,IAAIU,IAAAA,WACfT,EAAYD,EAASW,aAAa,SAK9BC,QAAU,CAChB,CAAEC,OAAQ,MAAOC,IAAK,MAAOC,MAAO,IACpC,CAAEF,OAAQ,OAAQC,IAAK,OAAQC,MAAO,IACtC,CAAEF,OAAQ,MAAOC,IAAK,MAAOC,MAAO,GAAIC,aAAc,EAAGC,WAAW,IAOlEf,EAAO,CACT,CAAEgB,IAAK,MAAOC,KAAM,MAAOC,IAAK,MAKpCnB,EAAUoB,UAAU,GACdlB,EAAW,CACb,GAAG,GAAG,GAAG,GACT,qGAEJF,EAAUoB,UAAU,EAAGlB,GACvBF,EAAUqB,WAAW,UACrBrB,EAAUsB,QAAQrB,GAYlBD,EAAUuB,UAAU,GAAGC,SAAS,CAAEC,cAAc,IAAQ,SAACC,EAAMC,GAC3DC,QAAQC,IAAI,YAAaF,GACzBD,EAAKI,WAAa,CACdC,QAAQ,GAGZL,EAAKM,eAAiB,CAClBC,KAAM,OACNC,YAAY,EAEZC,SAAU,CAAC,WAEnB,IAAG7B,EAAAE,KAAA,GAGkBT,EAASqC,KAAKC,cAAc,KAAD,GAA1ClC,EAAMG,EAAAgC,KACNlC,EAAO,IAAImC,KAAK,CAACpC,GAAS,CAAE8B,KA9DzB,qFA+DTO,EAAAA,EAAAA,QAAOpC,EAAM,aAKb,yBAAAE,EAAAmC,OAAA,GAAA3C,EAAA,KACH,kBAjES,OAAAJ,EAAAgD,MAAA,KAAAC,UAAA,KAmEV,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,UAC3BH,EAAAA,EAAAA,KAAA,UAAQI,QAASvD,EAAKsD,SAAC,QAGnC,C","sources":["webpack://4dev/./src/pages/Excel/ui/Excel.module.scss?c3f8","pages/Excel/ui/ExcelPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Excel_header__NsWfC\",\"header_avatar\":\"Excel_header_avatar__JDlCH\",\"wrapper\":\"Excel_wrapper__zRKai\",\"groups\":\"Excel_groups__e-hHx\",\"group\":\"Excel_group__IIay5\",\"group__title\":\"Excel_group__title__S1Oqp\",\"sort\":\"Excel_sort__1ZBCG\",\"sort__icon\":\"Excel_sort__icon__hDZMs\",\"sort__icon_active\":\"Excel_sort__icon_active__pCrsM\",\"description\":\"Excel_description__lXKlE\",\"buttons\":\"Excel_buttons__Kotx2\",\"form\":\"Excel_form__dMA0C\"};","// @ts-nocheck\n\nimport styles from './Excel.module.scss';\nimport { FC } from 'react';\nimport { saveAs } from 'file-saver';\nimport ExcelJS from 'exceljs';\n\nconst fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst fileExtension = '.xlsx';\n\nconst ExcelPage: FC = () => {\n    const save = async () => {\n        const workbook = new ExcelJS.Workbook();\n        const worksheet = workbook.addWorksheet('data');\n        // worksheet.views = [{\n        //     state: 'frozen', xSplit: 1, ySplit: 7\n        // }];\n\n        worksheet.columns = [\n            { header: 'pid', key: 'pid', width: 10 },\n            { header: 'name', key: 'name', width: 10 },\n            { header: 'cfo', key: 'cfo', width: 10, outlineLevel: 1, collapsed: true },\n        ];\n\n        // worksheet.getColumn(3).protection = {\n        //     locked: false\n        // };\n\n        const rows = [\n            { pid: 65464, name: 'foo', cfo: 'A' },\n            // { pid: 23423, name: 'foo 2', cfo: 'A' },\n            // { pid: 66344, name: 'foo 3', cfo: 'A' },\n            // { pid: 34333, name: 'foo 4', cfo: 'A' },\n        ];\n        worksheet.insertRow(1);\n        const firstRow = [\n            '','','','',\n            'Всего сотрудников'\n        ];\n        worksheet.insertRow(2, firstRow)\n        worksheet.mergeCells('A1:AF1');\n        worksheet.addRows(rows);\n        // await worksheet.protect('', {\n        //     formatColumns: true\n        // });\n\n        // worksheet.getCell('A2').protection = {\n        //     locked: false,\n        // }\n        // worksheet.getCell('C3').protection = {\n        //     locked: false,\n        // }\n\n        worksheet.getColumn(3).eachCell({ includeEmpty: true }, (cell, rowNumber) => {\n            console.log('rowNumber', rowNumber);\n            cell.protection = {\n                locked: false\n            };\n            // cell.names =  ['A','B','C']\n            cell.dataValidation = {\n                type: 'list',\n                allowBlank: true,\n                //  formulae: ['\"' + ASSESSING_PREVIOUS_PERIOD_OPTIONS.join(\",\") + '\"'],\n                formulae: ['\"A,B,C\"'],\n            };\n        });\n\n\n        const buffer = await workbook.xlsx.writeBuffer();\n        const blob = new Blob([buffer], { type: fileType });\n        saveAs(blob, 'test' + fileExtension);\n        // await workbook.xlsx.writeFile(fileName + fileExtension)\n\n        // const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\n        // const excelBuffer = await XLSX.write(wb, { bookType: 'xlsx', type: 'array', cellStyles: true });\n        // const data = await new Blob([excelBuffer], { type: fileType });\n    };\n\n    return (\n        <div className={styles.wrapper}>\n            <button onClick={save}>GO</button>\n        </div>\n    );\n};\n\nexport default ExcelPage;\n/*\n\nimport { saveAs } from 'file-saver';\nimport XLSX from 'sheetjs-style';\nimport ExcelJS from 'exceljs'\nimport { ASSESSING_PREVIOUS_PERIOD_OPTIONS } from '../../../config';\nimport { ISetting } from '../../models/ISettings';\n\nconst fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst fileExtension = '.xlsx';\n\nconst writeToCSV = async (fileName: string) => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet('data');\n    // worksheet.views = [{\n    //     state: 'frozen', xSplit: 1, ySplit: 7\n    // }];\n\n    worksheet.columns = [\n        { header: 'pid', key: 'pid', width: 10 },\n        { header: 'name', key: 'name', width: 10 },\n        { header: 'cfo', key: 'cfo', width: 10, outlineLevel: 1 },\n    ];\n\n    // worksheet.getColumn(3).protection = {\n    //     locked: false\n    // };\n\n    const rows = [\n        { pid: 65464, name: 'foo', cfo: 'A' },\n        // { pid: 23423, name: 'foo 2', cfo: 'A' },\n        // { pid: 66344, name: 'foo 3', cfo: 'A' },\n        // { pid: 34333, name: 'foo 4', cfo: 'A' },\n    ]\n    worksheet.addRows(rows);\n    // await worksheet.protect('', {\n    //     formatColumns: true\n    // });\n\n    // worksheet.getCell('A2').protection = {\n    //     locked: false,\n    // }\n    // worksheet.getCell('C3').protection = {\n    //     locked: false,\n    // }\n\n    worksheet.getColumn(3).eachCell({includeEmpty: true}, (cell, rowNumber) => {\n        console.log('rowNumber', rowNumber)\n        cell.protection = {\n            locked: false\n        }\n        // cell.names =  ['A','B','C']\n        cell.dataValidation = {\n            type: 'list',\n            allowBlank: true,\n            formulae: ['\"' + ASSESSING_PREVIOUS_PERIOD_OPTIONS.join(\",\") + '\"'],\n            // formulae: ['\"A,B,C\"'],\n        }\n    })\n\n\n    const buffer = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([buffer], { type: fileType })\n\n    // await workbook.xlsx.writeFile(fileName + fileExtension)\n\n    // const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\n    // const excelBuffer = await XLSX.write(wb, { bookType: 'xlsx', type: 'array', cellStyles: true });\n    // const data = await new Blob([excelBuffer], { type: fileType });\n    saveAs(blob, fileName + fileExtension);\n};\n\n* */"],"names":["save","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","workbook","worksheet","rows","firstRow","buffer","blob","wrap","_context","prev","next","ExcelJS","addWorksheet","columns","header","key","width","outlineLevel","collapsed","pid","name","cfo","insertRow","mergeCells","addRows","getColumn","eachCell","includeEmpty","cell","rowNumber","console","log","protection","locked","dataValidation","type","allowBlank","formulae","xlsx","writeBuffer","sent","Blob","saveAs","stop","apply","arguments","_jsx","className","styles","children","onClick"],"sourceRoot":""}