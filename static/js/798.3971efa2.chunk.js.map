{"version":3,"file":"static/js/798.3971efa2.chunk.js","mappings":"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","sources":["webpack://4dev/./src/pages/Tasks/ui/Tasks.module.scss?6579","app/store/selectors/tasksSelectors.ts","shared/interfaces/task.interface.ts","pages/Tasks/ui/TasksHeader.tsx","webpack://4dev/./src/shared/ui/TaskCardTitle/TaskCardTitle.module.scss?35c1","shared/ui/TaskCardTitle/TaskCardTitle.tsx","pages/Tasks/ui/TaskCard.tsx","pages/Tasks/ui/TasksGroup.tsx","shared/utils/getSelectOptions.ts","pages/Tasks/ui/TaskUpdate.tsx","pages/Tasks/ui/TaskCreate.tsx","pages/Tasks/ui/TasksPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Tasks_header__C1Mpl\",\"header_avatar\":\"Tasks_header_avatar__GvgYi\",\"wrapper\":\"Tasks_wrapper__sPWtI\",\"groups\":\"Tasks_groups__Q3Fon\",\"group\":\"Tasks_group__f59D8\",\"group__title\":\"Tasks_group__title__WFep5\",\"sort\":\"Tasks_sort__HX-gl\",\"sort__icon\":\"Tasks_sort__icon__KtrVt\",\"sort__icon_active\":\"Tasks_sort__icon_active__lvENX\",\"description\":\"Tasks_description__AKl1w\",\"buttons\":\"Tasks_buttons__FDuE4\",\"form\":\"Tasks_form__UgiPg\"};","import { RootState } from '../store';\r\n\r\nexport const tasksState = (state: RootState) => state.tasks;\r\n\r\n","export interface Task {\r\n    \"id\": string;\r\n    \"status\": TaskStatus;\r\n    \"priority\": TaskPriority;\r\n    \"title\": string;\r\n    \"description\": string;\r\n    \"schedule\": {\r\n        \"creation_time\": Date\r\n    },\r\n    \"author_name\": string;\r\n}\r\n\r\nexport enum TaskStatus {\r\n    IN_QUEUE ,\r\n    IN_PROGRESS,\r\n    DONE\r\n}\r\n\r\nexport enum TaskPriority {\r\n    FIRST,\r\n    SECOND,\r\n    THIRD\r\n}\r\n\r\nexport const TaskStatusNames = {\r\n    [TaskStatus.IN_QUEUE] : 'В очереди',\r\n    [TaskStatus.IN_PROGRESS] : 'В работе',\r\n    [TaskStatus.DONE] : 'Выполнено',\r\n}\r\n\r\nexport const TaskPriorityNames = {\r\n    [TaskPriority.FIRST] : 'Срочно',\r\n    [TaskPriority.SECOND] : 'Важно',\r\n    [TaskPriority.THIRD] : 'Не срочно',\r\n}","import { FC } from 'react';\r\nimport styles from './Tasks.module.scss';\r\nimport { Avatar, Button } from 'antd';\r\nimport { useAuth } from '../../../app/providers/auth/AuthProvider';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\n\r\nconst TasksHeader: FC = () => {\r\n    const { user, logout } = useAuth();\r\n    const { setContentType } = useModal();\r\n    const createTaskHandler = () => {\r\n        setContentType('CREATE');\r\n    };\r\n    return (\r\n        <div className={styles.header}>\r\n            <Button onClick={createTaskHandler}>Новая задача</Button>\r\n            <div>\r\n                <Button type=\"link\" onClick={logout}>Выйти</Button>\r\n                <Avatar>{user?.id}</Avatar>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TasksHeader;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TaskCardTitle_container__2TMQA\",\"indicator\":\"TaskCardTitle_indicator__ybPDO\",\"first\":\"TaskCardTitle_first__ST5Js\",\"second\":\"TaskCardTitle_second__UABCV\",\"third\":\"TaskCardTitle_third__70Jp0\"};","import { FC } from 'react';\r\nimport styles from './TaskCardTitle.module.scss';\r\nimport { TaskPriority } from '../../interfaces/task.interface';\r\nimport classnames from 'classnames';\r\n\r\ninterface ITaskCardTitle {\r\n    title: string;\r\n    priority: TaskPriority;\r\n}\r\n\r\nconst TaskCardTitle: FC<ITaskCardTitle> = ({ title, priority }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={classnames(styles.indicator, {\r\n                [styles.first]: priority === TaskPriority.FIRST,\r\n                [styles.second]: priority === TaskPriority.SECOND,\r\n                [styles.third]: priority === TaskPriority.THIRD,\r\n            })} />\r\n            <div>{title}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskCardTitle;\r\n","import { FC } from 'react';\r\nimport { Task } from '../../../shared/interfaces/task.interface';\r\nimport { Card } from 'antd';\r\nimport TaskCardTitle from '../../../shared/ui/TaskCardTitle/TaskCardTitle';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { useActions } from '../../../app/store';\r\n\r\ninterface ITaskCard {\r\n    task: Task;\r\n}\r\n\r\nconst TaskCard: FC<ITaskCard> = ({ task }) => {\r\n    const { title, author_name, priority } = task;\r\n    const { setCurrentTask } = useActions();\r\n    const { setContentType } = useModal();\r\n    const cardToggleHandler = () => {\r\n        setContentType('UPDATE');\r\n        setCurrentTask(task);\r\n    };\r\n    return (\r\n        <Card hoverable bordered={false} onClick={cardToggleHandler}>\r\n            <TaskCardTitle title={title} priority={priority} />\r\n            <hr />\r\n            <div>{author_name}</div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TaskCard;\r\n","import styles from './Tasks.module.scss';\r\nimport { FC, useCallback, useMemo, useState } from 'react';\r\nimport { Task } from '../../../shared/interfaces/task.interface';\r\nimport TaskCard from './TaskCard';\r\nimport { Card, Tooltip } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport { BsSortDown, BsSortDownAlt, BsSortUp, BsSortUpAlt } from 'react-icons/bs';\r\nimport classNames from 'classnames';\r\n\r\ninterface Group {\r\n    tasks: Task[];\r\n    title: string;\r\n}\r\n\r\nenum SortType {\r\n    PRIORITY = 'PRIORITY',\r\n    DATE = 'DATE',\r\n}\r\n\r\nenum Sort {\r\n    P_ASC = 'P_ASC',\r\n    P_DESC = 'P_DESC',\r\n    D_ASC = 'D_ASC',\r\n    D_DESC = 'D_DESC'\r\n}\r\n\r\nconst TasksGroup: FC<Group> = ({ title, tasks }) => {\r\n    const [activeSort, setActiveSort] = useState<SortType>(SortType.PRIORITY);\r\n    const [sortType, setSortType] = useState<Record<SortType, Sort>>({\r\n        [SortType.PRIORITY]: Sort.P_ASC,\r\n        [SortType.DATE]: Sort.D_ASC,\r\n    });\r\n\r\n    const sortedTasks: Task[] = useMemo(() => {\r\n        switch (sortType[activeSort]) {\r\n            case Sort.P_DESC:\r\n                return tasks.sort((a, b) => b.priority - a.priority);\r\n            case Sort.D_ASC:\r\n                return tasks.sort((a, b) => +dayjs(a.schedule.creation_time) - +dayjs(b.schedule.creation_time));\r\n            case Sort.D_DESC:\r\n                return tasks.sort((a, b) => +dayjs(b.schedule.creation_time) - +dayjs(a.schedule.creation_time));\r\n            default:\r\n                return tasks.sort((a, b) => a.priority - b.priority);\r\n\r\n        }\r\n    }, [activeSort, sortType, tasks]);\r\n\r\n    const sortHandler = useCallback((type: SortType, sort: Sort) => () => {\r\n        setActiveSort(type);\r\n\r\n        if (type === SortType.PRIORITY) {\r\n            setSortType({\r\n                ...sortType,\r\n                [type]: sort === Sort.P_ASC\r\n                    ? Sort.P_DESC\r\n                    : Sort.P_ASC\r\n            });\r\n        }\r\n\r\n        if (type === SortType.DATE) {\r\n            setSortType({\r\n                ...sortType,\r\n                [type]: sort === Sort.D_ASC\r\n                    ? Sort.D_DESC\r\n                    : Sort.D_ASC\r\n            });\r\n        }\r\n    }, [sortType]);\r\n\r\n    return (\r\n        <Card>\r\n            <div className={styles.group__title}>\r\n                <div>{title}</div>\r\n                <div className={styles.sort}>\r\n                    <Tooltip placement=\"top\" title=\"Сортировать по приоритету\">\r\n                        {\r\n                            sortType[SortType.PRIORITY] === Sort.P_ASC\r\n                                ? <i\r\n                                    onClick={sortHandler(SortType.PRIORITY, Sort.P_ASC)}\r\n                                    className={classNames(styles.sort__icon, {\r\n                                        [styles.sort__icon_active]: activeSort === SortType.PRIORITY,\r\n                                    })}><BsSortUp /></i>\r\n                                : <i\r\n                                    onClick={sortHandler(SortType.PRIORITY, Sort.P_DESC)}\r\n                                    className={classNames(styles.sort__icon, {\r\n                                        [styles.sort__icon_active]: activeSort === SortType.PRIORITY,\r\n                                    })}><BsSortUpAlt /></i>\r\n                        }\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Сортировать по дате создания\">\r\n                        {\r\n                            sortType[SortType.DATE] === Sort.D_ASC ? <i\r\n                                    onClick={sortHandler(SortType.DATE, Sort.D_ASC)}\r\n                                    className={classNames(styles.sort__icon, {\r\n                                        [styles.sort__icon_active]: activeSort === SortType.DATE,\r\n                                    })}><BsSortDown /></i>\r\n                                : <i\r\n                                    onClick={sortHandler(SortType.DATE, Sort.D_DESC)}\r\n                                    className={classNames(styles.sort__icon, {\r\n                                        [styles.sort__icon_active]: activeSort === SortType.DATE,\r\n                                    })}><BsSortDownAlt /></i>\r\n                        }\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            <div className={styles.group}>\r\n                {\r\n                    sortedTasks.map((task) => <TaskCard key={task.id} task={task} />)\r\n                }\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TasksGroup;\r\n","\r\nexport const getSelectOptions = (obj: Record<string, string>) => {\r\n    return Object.entries(obj).map(([value, label]) => ({ value, label }))\r\n}","import { Button, Modal, Select } from 'antd';\r\nimport { FC, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n    Task,\r\n    TaskPriorityNames,\r\n    TaskStatusNames\r\n} from '../../../shared/interfaces/task.interface';\r\nimport styles from './Tasks.module.scss';\r\nimport { useActions } from '../../../app/store';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { getSelectOptions } from '../../../shared/utils/getSelectOptions';\r\n\r\ninterface ITaskUpdate {\r\n    task: Task;\r\n}\r\n\r\ninterface IOption {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nconst TaskUpdate: FC<ITaskUpdate> = ({ task }) => {\r\n    const {\r\n        id,\r\n        title,\r\n        author_name,\r\n        description,\r\n        status,\r\n        priority\r\n    } = task;\r\n    const { deleteTask, updateTask, setCurrentTask } = useActions();\r\n    const { control, handleSubmit, watch } = useForm();\r\n    const { onClose, contentType } = useModal();\r\n\r\n    const [statusesOptions, setStatusesOptions] = useState<IOption[]>([]);\r\n    const [prioritiesOptions, setPrioritiesOptions] = useState<IOption[]>([]);\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    const deleteTaskHandler = () => {\r\n        deleteTask(id);\r\n        onClose();\r\n        setCurrentTask(null);\r\n    };\r\n\r\n    const onSubmit = useCallback((data: any) => {\r\n        const task = { id } as Task;\r\n        if (typeof data.status !== 'undefined') {\r\n            task.status = +data.status;\r\n        }\r\n        if (typeof data.priority !== 'undefined') {\r\n            task.priority = +data.priority;\r\n        }\r\n\r\n        updateTask(task);\r\n        onClose();\r\n        setCurrentTask(null);\r\n    }, [id, onClose, setCurrentTask, updateTask]);\r\n\r\n    useEffect(() => {\r\n        setStatusesOptions(getSelectOptions(TaskStatusNames));\r\n        setPrioritiesOptions(getSelectOptions(TaskPriorityNames));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        watch((data) => {\r\n            setDisabled(!(status !== +data.status || priority !== +data.priority));\r\n        });\r\n    }, [priority, status, watch]);\r\n\r\n    return (\r\n        <Modal\r\n            title={title}\r\n            open={contentType === 'UPDATE'}\r\n            onCancel={onClose}\r\n            footer={null}\r\n            destroyOnClose\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\r\n                <div className={styles.description}>\r\n                    <strong>Исполнитель:</strong>\r\n                    <i>{author_name}</i>\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Описание задачи:</strong>\r\n                    <i>{description}</i>\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Состояние:</strong>\r\n                    <Controller\r\n                        key={statusesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={statusesOptions}\r\n                            defaultValue={status.toString()}\r\n                        />}\r\n                        name=\"status\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Приоритет:</strong>\r\n                    <Controller\r\n                        key={prioritiesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={prioritiesOptions}\r\n                            defaultValue={priority.toString()}\r\n                        />}\r\n                        name=\"priority\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <div className={styles.buttons}>\r\n                    <Button danger onClick={deleteTaskHandler}>Удалить</Button>\r\n                    <Button disabled={disabled} htmlType=\"submit\" type=\"primary\">Сохранить</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TaskUpdate;\r\n","import { Button, Input, Modal, Select } from 'antd';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport dayjs from 'dayjs';\r\nimport { FC, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n    Task,\r\n    TaskPriorityNames,\r\n    TaskStatusNames\r\n} from '../../../shared/interfaces/task.interface';\r\nimport styles from './Tasks.module.scss';\r\nimport { useActions, useTypedSelector } from '../../../app/store';\r\nimport { useModal } from '../../../app/providers/modal/modalContext';\r\nimport { getSelectOptions } from '../../../shared/utils/getSelectOptions';\r\nimport { tasksState } from '../../../app/store/selectors';\r\n\r\ninterface IOption {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst TaskCreate: FC = () => {\r\n    const { authors } = useTypedSelector(tasksState);\r\n    const { createTask } = useActions();\r\n    const { control, handleSubmit, reset } = useForm();\r\n    const { onClose, contentType } = useModal();\r\n    const [statusesOptions, setStatusesOptions] = useState<IOption[]>([]);\r\n    const [prioritiesOptions, setPrioritiesOptions] = useState<IOption[]>([]);\r\n    const [authorsOptions, setAuthorsOptions] = useState<IOption[]>([]);\r\n\r\n    const resetHandler = useCallback(() => {\r\n        onClose();\r\n        reset();\r\n    }, [onClose, reset]);\r\n\r\n    const getAuthor = useCallback((id: string): string => {\r\n        const author = authors.find((author) => author.id === id);\r\n        if (author) {\r\n            return author.author_name;\r\n        }\r\n        return '';\r\n    }, [authors]);\r\n\r\n    const onSubmit = useCallback((data: any) => {\r\n        const task = {\r\n            ...data,\r\n            priority: +data.priority,\r\n            status: +data.status,\r\n            schedule: {\r\n                creation_time: dayjs().format('YYYY-MM-DDTHH:mm:ss')\r\n            },\r\n            author_name: getAuthor(data.author_name),\r\n        } as Task;\r\n\r\n        createTask(task);\r\n        resetHandler();\r\n\r\n    }, [createTask, getAuthor, resetHandler]);\r\n\r\n    useEffect(() => {\r\n        setStatusesOptions(getSelectOptions(TaskStatusNames));\r\n        setPrioritiesOptions(getSelectOptions(TaskPriorityNames));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!!authors.length) {\r\n            setAuthorsOptions(authors.map(({ id, author_name }) => ({ value: id, label: author_name })));\r\n        }\r\n    }, [authors]);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Новая задача\"\r\n            open={contentType === 'CREATE'}\r\n            onCancel={resetHandler}\r\n            footer={null}\r\n            destroyOnClose\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\r\n                <div className={styles.description}>\r\n                    <strong>Название:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <Input {...field} />}\r\n                        name=\"title\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Исполнитель:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={authorsOptions}\r\n                        />}\r\n                        name=\"author_name\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.description}>\r\n                    <strong>Описание задачи:</strong>\r\n                    <Controller\r\n                        key={authorsOptions.length}\r\n                        render={({ field }) => <TextArea {...field} />}\r\n                        name=\"description\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Состояние:</strong>\r\n                    <Controller\r\n                        key={statusesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={statusesOptions}\r\n                        />}\r\n                        name=\"status\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <strong>Приоритет:</strong>\r\n                    <Controller\r\n                        key={prioritiesOptions.length}\r\n                        render={({ field }) => <Select\r\n                            {...field}\r\n                            options={prioritiesOptions}\r\n                        />}\r\n                        name=\"priority\"\r\n                        control={control}\r\n                        rules={{ required: true }}\r\n                    />\r\n                </div>\r\n                <div className={styles.buttons}>\r\n                    <Button onClick={resetHandler}>Отменить</Button>\r\n                    <Button htmlType=\"submit\" type=\"primary\">Сохранить</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TaskCreate;\r\n","import styles from './Tasks.module.scss';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../../app/providers/auth/AuthProvider';\nimport { FC, useEffect, useState } from 'react';\nimport { useActions, useTypedSelector } from '../../../app/store';\nimport { tasksState } from '../../../app/store/selectors';\nimport { Task, TaskStatus, TaskStatusNames } from '../../../shared/interfaces/task.interface';\nimport TasksHeader from './TasksHeader';\nimport TasksGroup from './TasksGroup';\nimport TaskUpdate from './TaskUpdate';\nimport TaskCreate from './TaskCreate';\n\ntype IGroup = Record<TaskStatus, Task[]>;\n\nconst TasksPage: FC = () => {\n    const { tasks, currentTask } = useTypedSelector(tasksState);\n    const { authenticated } = useAuth();\n    const location = useLocation();\n    const { fetchTasks, fetchAuthors } = useActions();\n    const [group, setGroup] = useState<IGroup>({} as IGroup);\n\n    useEffect(() => {\n        if (authenticated) {\n            fetchTasks();\n            fetchAuthors();\n        }\n    }, [authenticated, fetchAuthors, fetchTasks]);\n\n    useEffect(() => {\n        if (!!tasks.length) {\n            const group = {} as IGroup;\n            group[TaskStatus.IN_QUEUE] = tasks.filter(({ status }) => status === TaskStatus.IN_QUEUE);\n            group[TaskStatus.IN_PROGRESS] = tasks.filter(({ status }) => status === TaskStatus.IN_PROGRESS);\n            group[TaskStatus.DONE] = tasks.filter(({ status }) => status === TaskStatus.DONE);\n            setGroup(group);\n        }\n    }, [tasks]);\n\n    if (!authenticated) {\n        return <Navigate to=\"/error\" state={{ from: location }} replace />;\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <TasksHeader />\n            <TaskCreate />\n            {currentTask && <TaskUpdate task={currentTask} />}\n            <div className={styles.groups}>\n                {\n                    !!group[TaskStatus.IN_QUEUE]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.IN_QUEUE]}\n                        title={TaskStatusNames[TaskStatus.IN_QUEUE]}\n                    />)\n                }\n                {\n                    !!group[TaskStatus.IN_PROGRESS]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.IN_PROGRESS]}\n                        title={TaskStatusNames[TaskStatus.IN_PROGRESS]}\n                    />)\n                }\n                {\n                    !!group[TaskStatus.DONE]?.length\n                    && (<TasksGroup\n                        tasks={group[TaskStatus.DONE]}\n                        title={TaskStatusNames[TaskStatus.DONE]}\n                    />)\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default TasksPage;\n"],"names":["tasksState","state","tasks","TaskStatus","TaskPriority","TaskStatusNames","_TaskStatusNames","_defineProperty","IN_QUEUE","IN_PROGRESS","DONE","TaskPriorityNames","_TaskPriorityNames","FIRST","SECOND","THIRD","_useAuth","useAuth","user","logout","setContentType","useModal","_jsxs","className","styles","children","_jsx","Button","onClick","type","Avatar","id","_ref","_classnames","title","priority","classnames","task","author_name","setCurrentTask","useActions","Card","hoverable","bordered","TaskCardTitle","SortType","Sort","_useState5","_useState","useState","PRIORITY","_useState2","_slicedToArray","activeSort","setActiveSort","_useState3","P_ASC","DATE","D_ASC","_useState4","sortType","setSortType","sortedTasks","useMemo","P_DESC","sort","a","b","dayjs","schedule","creation_time","D_DESC","sortHandler","useCallback","_objectSpread","Tooltip","placement","classNames","BsSortUp","BsSortUpAlt","BsSortDown","BsSortDownAlt","map","TaskCard","getSelectOptions","obj","Object","entries","_ref2","value","label","description","status","_useActions","deleteTask","updateTask","_useForm","useForm","control","handleSubmit","watch","_useModal","onClose","contentType","statusesOptions","setStatusesOptions","prioritiesOptions","setPrioritiesOptions","_useState6","disabled","setDisabled","onSubmit","data","useEffect","Modal","open","onCancel","footer","destroyOnClose","Controller","render","field","Select","options","defaultValue","toString","name","length","_ref3","danger","htmlType","TextArea","Input","authors","useTypedSelector","createTask","reset","authorsOptions","setAuthorsOptions","resetHandler","getAuthor","author","find","format","rules","required","_ref4","_ref5","_ref6","_group$TaskStatus$IN_","_group$TaskStatus$IN_2","_group$TaskStatus$DON","_useTypedSelector","currentTask","authenticated","location","useLocation","fetchTasks","fetchAuthors","group","setGroup","filter","TasksHeader","TaskCreate","TaskUpdate","TasksGroup","Navigate","to","from","replace"],"sourceRoot":""}